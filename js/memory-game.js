// Memory Game - File ri√™ng ƒë·ªÉ tr√°nh l·ªói syntax
window.startMemoryGame = function() {
    const gameContainer = document.getElementById('memory-game');
    if (!gameContainer) {
        alert('Vui l√≤ng v√†o trang AI Games tr∆∞·ªõc');
        return;
    }
    
    // Show game container
    gameContainer.style.display = 'block';
    const board = document.getElementById('memory-board');
    const stats = document.getElementById('memory-stats');
    const explanationsDiv = document.getElementById('memory-explanations');
    const explanationsContent = document.getElementById('explanations-content');
    
    // Memory cards with explanations
    const memoryCards = [
        { 
            id: 1, 
            text: "Nh·∫≠n th·ª©c", 
            pair: "Ph·∫£n √°nh",
            explanation: "Nh·∫≠n th·ª©c v√† Ph·∫£n √°nh l√† c·∫∑p kh√°i ni·ªám c·ªët l√µi trong LLCT. Nh·∫≠n th·ª©c l√† qu√° tr√¨nh ph·∫£n √°nh th·∫ø gi·ªõi kh√°ch quan v√†o ƒë·∫ßu √≥c con ng∆∞·ªùi."
        },
        { 
            id: 2, 
            text: "Ph·∫£n √°nh", 
            pair: "Nh·∫≠n th·ª©c",
            explanation: "Ph·∫£n √°nh l√† b·∫£n ch·∫•t c·ªßa nh·∫≠n th·ª©c - m·ªçi nh·∫≠n th·ª©c ƒë·ªÅu l√† s·ª± ph·∫£n √°nh c·ªßa th·∫ø gi·ªõi kh√°ch quan."
        },
        { 
            id: 3, 
            text: "C·∫£m t√≠nh", 
            pair: "L√Ω t√≠nh",
            explanation: "C·∫£m t√≠nh v√† L√Ω t√≠nh l√† hai c·∫•p ƒë·ªô ph√°t tri·ªÉn c·ªßa nh·∫≠n th·ª©c. C·∫£m t√≠nh l√† b∆∞·ªõc ƒë·∫ßu, sau ƒë√≥ ph√°t tri·ªÉn l√™n L√Ω t√≠nh."
        },
        { 
            id: 4, 
            text: "L√Ω t√≠nh", 
            pair: "C·∫£m t√≠nh",
            explanation: "L√Ω t√≠nh v∆∞·ª£t l√™n tr√™n c·∫£m t√≠nh ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c hi·ªÉu bi·∫øt s√¢u s·∫Øc v·ªÅ b·∫£n ch·∫•t s·ª± v·∫≠t."
        },
        { 
            id: 5, 
            text: "Th·ª±c ti·ªÖn", 
            pair: "Ki·ªÉm nghi·ªám",
            explanation: "Th·ª±c ti·ªÖn l√† ti√™u chu·∫©n duy nh·∫•t ƒë·ªÉ ki·ªÉm nghi·ªám ch√¢n l√Ω. M·ªçi l√Ω thuy·∫øt ƒë·ªÅu ph·∫£i ƒë∆∞·ª£c ki·ªÉm nghi·ªám qua th·ª±c ti·ªÖn."
        },
        { 
            id: 6, 
            text: "Ki·ªÉm nghi·ªám", 
            pair: "Th·ª±c ti·ªÖn",
            explanation: "Ch·ªâ c√≥ th·ª±c ti·ªÖn m·ªõi c√≥ th·ªÉ ki·ªÉm nghi·ªám ƒë∆∞·ª£c t√≠nh ƒë√∫ng sai c·ªßa nh·∫≠n th·ª©c."
        },
        { 
            id: 7, 
            text: "Bi·ªán ch·ª©ng", 
            pair: "M√¢u thu·∫´n",
            explanation: "T∆∞ duy bi·ªán ch·ª©ng nh√¨n nh·∫≠n m√¢u thu·∫´n nh∆∞ ƒë·ªông l·ª±c c·ªßa s·ª± ph√°t tri·ªÉn."
        },
        { 
            id: 8, 
            text: "M√¢u thu·∫´n", 
            pair: "Bi·ªán ch·ª©ng",
            explanation: "M√¢u thu·∫´n l√† ngu·ªìn g·ªëc c·ªßa s·ª± v·∫≠n ƒë·ªông, ph√°t tri·ªÉn. T∆∞ duy bi·ªán ch·ª©ng gi√∫p ta nh·∫≠n th·ª©c ƒë√∫ng v·ªÅ m√¢u thu·∫´n."
        }
    ];
    
    // Game state
    let gameState = {
        flipped: [],
        matched: [],
        moves: 0,
        startTime: Date.now(),
        explanations: []
    };
    
    // Update stats function
    function updateStats() {
        const elapsed = Math.floor((Date.now() - gameState.startTime) / 1000);
        stats.innerHTML = 'Th·ªùi gian: ' + elapsed + 's | L∆∞·ª£t ch∆°i: ' + gameState.moves + ' | ƒê√£ gh√©p: ' + (gameState.matched.length / 2) + '/4 c·∫∑p';
    }
    
    // Add explanation function
    function addExplanation(card1, card2) {
        const cardData = memoryCards.find(c => c.id === parseInt(card1.dataset.cardId));
        if (!cardData) return;
        
        gameState.explanations.push({
            pair: card1.dataset.cardText + ' - ' + card2.dataset.cardText,
            explanation: cardData.explanation
        });
        
        // Update explanations display
        let explanationsHTML = '';
        gameState.explanations.forEach(function(exp, index) {
            explanationsHTML += '<div style="margin: 15px 0; padding: 12px; background: white; border-radius: 8px; border-left: 4px solid #27ae60;">';
            explanationsHTML += '<h5 style="color: #27ae60; margin-bottom: 8px;">üîó ' + exp.pair + '</h5>';
            explanationsHTML += '<p style="line-height: 1.5; color: #2c3e50; font-size: 14px;">' + exp.explanation + '</p>';
            explanationsHTML += '</div>';
        });
        
        explanationsContent.innerHTML = explanationsHTML;
        explanationsDiv.style.display = 'block';
        
        // Scroll to explanation
        setTimeout(function() {
            explanationsDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }, 300);
    }
    
    // Shuffle cards
    const shuffledCards = memoryCards.slice().sort(function() { return Math.random() - 0.5; });
    
    // Create board
    board.innerHTML = '';
    board.style.cssText = 'display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px; max-width: 400px; margin: 0 auto;';
    
    shuffledCards.forEach(function(card, index) {
        const cardElement = document.createElement('div');
        cardElement.style.cssText = 'background: linear-gradient(135deg, #3498db, #2980b9); border-radius: 8px; padding: 15px; text-align: center; cursor: pointer; transition: all 0.3s ease; user-select: none; min-height: 80px; display: flex; align-items: center; justify-content: center; font-weight: bold; color: white; font-size: 14px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);';
        
        cardElement.innerHTML = '<div>?</div>';
        cardElement.dataset.cardId = card.id;
        cardElement.dataset.cardText = card.text;
        cardElement.dataset.cardPair = card.pair;
        
        cardElement.addEventListener('click', function() {
            // Prevent multiple clicks
            if (gameState.flipped.length >= 2 || 
                gameState.flipped.indexOf(this) !== -1 ||
                gameState.matched.indexOf(card.id) !== -1 ||
                this.classList.contains('flipped')) {
                return;
            }
            
            // Flip card
            this.style.background = 'linear-gradient(135deg, #e74c3c, #c0392b)';
            this.innerHTML = '<div>' + card.text + '</div>';
            this.classList.add('flipped');
            this.style.transform = 'scale(1.05)';
            
            gameState.flipped.push(this);
            gameState.moves++;
            
            // Check for match when 2 cards are flipped
            if (gameState.flipped.length === 2) {
                setTimeout(function() {
                    const card1 = gameState.flipped[0];
                    const card2 = gameState.flipped[1];
                    const card1Text = card1.dataset.cardText;
                    const card1Pair = card1.dataset.cardPair;
                    const card2Text = card2.dataset.cardText;
                    
                    if (card1Pair === card2Text || card2.dataset.cardPair === card1Text) {
                        // Match found
                        card1.style.background = 'linear-gradient(135deg, #27ae60, #229954)';
                        card2.style.background = 'linear-gradient(135deg, #27ae60, #229954)';
                        card1.style.pointerEvents = 'none';
                        card2.style.pointerEvents = 'none';
                        card1.style.transform = 'scale(1)';
                        card2.style.transform = 'scale(1)';
                        card1.style.boxShadow = '0 0 20px #27ae60';
                        card2.style.boxShadow = '0 0 20px #27ae60';
                        
                        gameState.matched.push(parseInt(card1.dataset.cardId), parseInt(card2.dataset.cardId));
                        
                        // Show explanation
                        addExplanation(card1, card2);
                        
                        // Check if game complete
                        if (gameState.matched.length === memoryCards.length) {
                            setTimeout(function() {
                                const elapsed = Math.floor((Date.now() - gameState.startTime) / 1000);
                                let performance = elapsed < 45 && gameState.moves < 15 ? 'üèÜ Xu·∫•t s·∫Øc!' : 
                                                elapsed < 90 && gameState.moves < 25 ? 'üéâ R·∫•t t·ªët!' : 'üëç T·ªët l·∫Øm!';
                                
                                const resultDiv = document.getElementById('memory-result');
                                if (resultDiv) {
                                    resultDiv.innerHTML = '<div style="background: #d4edda; padding: 20px; border-radius: 12px; border: 2px solid #28a745; text-align: center; box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);"><h4 style="color: #155724; margin-bottom: 10px;">' + performance + '</h4><p style="color: #155724; margin-bottom: 15px;"><strong>Ho√†n th√†nh trong ' + elapsed + ' gi√¢y v·ªõi ' + gameState.moves + ' l∆∞·ª£t ch∆°i!</strong></p><p style="color: #155724; margin-bottom: 15px; font-size: 14px;">üéì B·∫°n ƒë√£ h·ªçc ƒë∆∞·ª£c ' + gameState.explanations.length + ' m·ªëi li√™n h·ªá quan tr·ªçng trong LLCT!</p><button onclick="window.startMemoryGame()" style="background: #28a745; color: white; border: none; padding: 12px 25px; border-radius: 8px; cursor: pointer; margin-top: 10px; font-weight: bold; box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);">üîÑ Ch∆°i l·∫°i ƒë·ªÉ √¥n t·∫≠p</button></div>';
                                    resultDiv.style.display = 'block';
                                    
                                    setTimeout(function() {
                                        resultDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                    }, 500);
                                }
                            }, 1000);
                        }
                    } else {
                        // No match - flip back
                        setTimeout(function() {
                            card1.style.background = 'linear-gradient(135deg, #3498db, #2980b9)';
                            card2.style.background = 'linear-gradient(135deg, #3498db, #2980b9)';
                            card1.innerHTML = '<div>?</div>';
                            card2.innerHTML = '<div>?</div>';
                            card1.classList.remove('flipped');
                            card2.classList.remove('flipped');
                            card1.style.transform = 'scale(1)';
                            card2.style.transform = 'scale(1)';
                        }, 1000);
                    }
                    
                    gameState.flipped = [];
                    updateStats();
                }, 1200);
            }
            
            updateStats();
        });
        
        board.appendChild(cardElement);
    });
    
    // Reset game
    explanationsDiv.style.display = 'none';
    explanationsContent.innerHTML = '';
    gameState.explanations = [];
    
    // Initial stats
    updateStats();
    
    // Update stats timer
    const statsInterval = setInterval(function() {
        if (gameState.matched.length === memoryCards.length) {
            clearInterval(statsInterval);
        } else {
            updateStats();
        }
    }, 1000);
    
    // Hide result
    const resultDiv = document.getElementById('memory-result');
    if (resultDiv) {
        resultDiv.style.display = 'none';
    }
};