// AI Games and Interactive Features

// Ensure functions are available globally
if (typeof window !== 'undefined') {
    
// AI Chatbot functionality
const chatResponses = {
    "llct": [
        "LLCT (L√Ω lu·∫≠n Nh·∫≠n th·ª©c) nghi√™n c·ª©u v·ªÅ qu√° tr√¨nh nh·∫≠n th·ª©c th·∫ø gi·ªõi c·ªßa con ng∆∞·ªùi. B·∫°n mu·ªën t√¨m hi·ªÉu kh√≠a c·∫°nh n√†o c·ª• th·ªÉ?",
        "LLCT bao g·ªìm: nguy√™n l√Ω ph·∫£n √°nh, quy lu·∫≠t c·∫£m t√≠nh-l√Ω t√≠nh, vai tr√≤ th·ª±c ti·ªÖn, v√† t√≠nh bi·ªán ch·ª©ng c·ªßa nh·∫≠n th·ª©c."
    ],
    "n·∫±m y√™n": [
        "Tr√†o l∆∞u 'n·∫±m y√™n m·∫∑c k·ªá ƒë·ªùi' xu·∫•t ph√°t t·ª´ √°p l·ª±c x√£ h·ªôi v√† kinh t·∫ø. Theo LLCT, ƒë√¢y l√† ph·∫£n √°nh ti√™u c·ª±c c·∫ßn ƒë∆∞·ª£c kh·∫Øc ph·ª•c.",
        "Thay v√¨ 'n·∫±m y√™n', b·∫°n n√™n 'h√†nh ƒë·ªông th√¥ng minh' - c√≥ k·∫ø ho·∫°ch v√† t·ª´ng b∆∞·ªõc c·∫£i thi·ªán cu·ªôc s·ªëng."
    ],
    "nh·∫≠n th·ª©c": [
        "Nh·∫≠n th·ª©c l√† qu√° tr√¨nh ph·∫£n √°nh th·∫ø gi·ªõi kh√°ch quan v√†o ƒë·∫ßu √≥c con ng∆∞·ªùi. C√≥ 2 c·∫•p ƒë·ªô: c·∫£m t√≠nh v√† l√Ω t√≠nh.",
        "Nh·∫≠n th·ª©c ph√°t tri·ªÉn t·ª´ th·ª±c ti·ªÖn, qua th·ª±c ti·ªÖn v√† ƒë·ªÉ ph·ª•c v·ª• th·ª±c ti·ªÖn."
    ],
    "th·ª±c ti·ªÖn": [
        "Th·ª±c ti·ªÖn l√† ho·∫°t ƒë·ªông v·∫≠t ch·∫•t c√≥ m·ª•c ƒë√≠ch c·ªßa con ng∆∞·ªùi ƒë·ªÉ c·∫£i t·∫°o th·∫ø gi·ªõi. ƒê√¢y l√† c∆° s·ªü v√† ƒë·ªông l·ª±c c·ªßa nh·∫≠n th·ª©c.",
        "Th·ª±c ti·ªÖn v·ª´a l√† ngu·ªìn g·ªëc, v·ª´a l√† ƒë·ªông l·ª±c v√† ti√™u chu·∫©n ki·ªÉm nghi·ªám ch√¢n l√Ω."
    ],
    "bi·ªán ch·ª©ng": [
        "Ph∆∞∆°ng ph√°p bi·ªán ch·ª©ng xem x√©t s·ª± v·∫≠t trong m·ªëi li√™n h·ªá, v·∫≠n ƒë·ªông, ph√°t tri·ªÉn v√† m√¢u thu·∫´n.",
        "Ba quy lu·∫≠t bi·ªán ch·ª©ng: ƒë·ªëi l·∫≠p th·ªëng nh·∫•t, l∆∞·ª£ng-ch·∫•t, ph·ªß ƒë·ªãnh c·ªßa ph·ªß ƒë·ªãnh."
    ]
};

function sendMessage() {
    const input = document.getElementById('chat-input');
    const message = input.value.trim();
    if (!message) return;

    const chatMessages = document.getElementById('chat-messages');
    
    // Add user message
    addChatMessage(chatMessages, message, 'user');
    
    // Generate AI response
    setTimeout(() => {
        const response = generateChatResponse(message);
        addChatMessage(chatMessages, response, 'ai');
    }, 500);
    
    input.value = '';
    input.focus();
}

function addChatMessage(container, message, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.style.cssText = `
        margin: 10px 0;
        padding: 10px 15px;
        border-radius: 10px;
        max-width: 80%;
        word-wrap: break-word;
        animation: fadeInUp 0.3s ease;
        ${sender === 'user' 
            ? 'background: #3498db; color: white; margin-left: auto; text-align: right;' 
            : 'background: #f1f3f4; color: #333; margin-right: auto;'
        }
    `;
    
    if (sender === 'ai') {
        messageDiv.innerHTML = `<strong>ü§ñ AI Tutor:</strong> ${message}`;
    } else {
        messageDiv.innerHTML = `<strong>B·∫°n:</strong> ${message}`;
    }
    
    container.appendChild(messageDiv);
    container.scrollTop = container.scrollHeight;
}

function generateChatResponse(message) {
    const lowerMessage = message.toLowerCase();
    
    for (const [key, responses] of Object.entries(chatResponses)) {
        if (lowerMessage.includes(key)) {
            return responses[Math.floor(Math.random() * responses.length)];
        }
    }
    
    // Default responses
    const defaultResponses = [
        "C√¢u h·ªèi th√∫ v·ªã! Theo LLCT, m·ªçi v·∫•n ƒë·ªÅ ƒë·ªÅu c·∫ßn ƒë∆∞·ª£c nh√¨n nh·∫≠n m·ªôt c√°ch bi·ªán ch·ª©ng v√† to√†n di·ªán.",
        "H√£y c√πng ph√¢n t√≠ch v·∫•n ƒë·ªÅ n√†y qua g√≥c ƒë·ªô nh·∫≠n th·ª©c duy v·∫≠t. B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m chi ti·∫øt kh√¥ng?",
        "ƒê√¢y l√† ch·ªß ƒë·ªÅ r·∫•t hay! LLCT gi√∫p ch√∫ng ta hi·ªÉu s√¢u h∆°n v·ªÅ b·∫£n ch·∫•t c·ªßa v·∫•n ƒë·ªÅ n√†y.",
        "T√¥i khuy·∫øn kh√≠ch b·∫°n √°p d·ª•ng quy lu·∫≠t t·ª´ c·∫£m t√≠nh l√™n l√Ω t√≠nh ƒë·ªÉ ph√¢n t√≠ch v·∫•n ƒë·ªÅ n√†y s√¢u h∆°n."
    ];
    
    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
}

// Memory Game
const memoryCards = [
    { id: 1, text: "Nh·∫≠n th·ª©c", pair: "Ph·∫£n √°nh" },
    { id: 2, text: "Ph·∫£n √°nh", pair: "Nh·∫≠n th·ª©c" },
    { id: 3, text: "C·∫£m t√≠nh", pair: "L√Ω t√≠nh" },
    { id: 4, text: "L√Ω t√≠nh", pair: "C·∫£m t√≠nh" },
    { id: 5, text: "Th·ª±c ti·ªÖn", pair: "Ki·ªÉm nghi·ªám" },
    { id: 6, text: "Ki·ªÉm nghi·ªám", pair: "Th·ª±c ti·ªÖn" },
    { id: 7, text: "Bi·ªán ch·ª©ng", pair: "M√¢u thu·∫´n" },
    { id: 8, text: "M√¢u thu·∫´n", pair: "Bi·ªán ch·ª©ng" }
];

let memoryGameState = {
    flipped: [],
    matched: [],
    moves: 0,
    startTime: null
};

function startMemoryGame() {
    const gameContainer = document.getElementById('memory-game');
    const board = document.getElementById('memory-board');
    const stats = document.getElementById('memory-stats');
    
    // Reset game state
    memoryGameState = { flipped: [], matched: [], moves: 0, startTime: Date.now() };
    
    // Shuffle cards
    const shuffledCards = [...memoryCards].sort(() => Math.random() - 0.5);
    
    // Create board
    board.innerHTML = '';
    shuffledCards.forEach((card, index) => {
        const cardElement = document.createElement('div');
        cardElement.style.cssText = `
            background: linear-gradient(135deg, #3498db, #2980b9);
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            user-select: none;
            min-height: 80px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
        `;
        
        cardElement.innerHTML = '<div style="transform: rotateY(180deg);">?</div>';
        cardElement.dataset.cardId = card.id;
        cardElement.dataset.cardIndex = index;
        cardElement.addEventListener('click', () => flipCard(cardElement, card));
        
        board.appendChild(cardElement);
    });
    
    gameContainer.style.display = 'block';
    updateMemoryStats();
}

function flipCard(element, card) {
    if (memoryGameState.flipped.length >= 2 || 
        memoryGameState.flipped.includes(element) ||
        memoryGameState.matched.includes(card.id)) {
        return;
    }
    
    // Flip animation
    element.style.transform = 'rotateY(180deg)';
    setTimeout(() => {
        element.innerHTML = `<div>${card.text}</div>`;
        element.style.background = 'linear-gradient(135deg, #e74c3c, #c0392b)';
        element.style.transform = 'rotateY(0deg)';
    }, 150);
    
    memoryGameState.flipped.push(element);
    memoryGameState.moves++;
    
    if (memoryGameState.flipped.length === 2) {
        setTimeout(checkMemoryMatch, 800);
    }
    
    updateMemoryStats();
}

function checkMemoryMatch() {
    const [card1, card2] = memoryGameState.flipped;
    const card1Data = memoryCards.find(c => c.id == card1.dataset.cardId);
    const card2Data = memoryCards.find(c => c.id == card2.dataset.cardId);
    
    if (card1Data.pair === card2Data.text) {
        // Match found
        card1.style.background = 'linear-gradient(135deg, #27ae60, #229954)';
        card2.style.background = 'linear-gradient(135deg, #27ae60, #229954)';
        card1.style.pointerEvents = 'none';
        card2.style.pointerEvents = 'none';
        
        memoryGameState.matched.push(card1Data.id, card2Data.id);
        
        // Check if game complete
        if (memoryGameState.matched.length === memoryCards.length) {
            setTimeout(endMemoryGame, 500);
        }
    } else {
        // No match - flip back
        setTimeout(() => {
            [card1, card2].forEach(card => {
                card.style.transform = 'rotateY(180deg)';
                setTimeout(() => {
                    card.innerHTML = '<div style="transform: rotateY(180deg);">?</div>';
                    card.style.background = 'linear-gradient(135deg, #3498db, #2980b9)';
                    card.style.transform = 'rotateY(0deg)';
                }, 150);
            });
        }, 300);
    }
    
    memoryGameState.flipped = [];
}

function updateMemoryStats() {
    const stats = document.getElementById('memory-stats');
    const elapsed = memoryGameState.startTime ? 
        Math.floor((Date.now() - memoryGameState.startTime) / 1000) : 0;
    
    stats.innerHTML = `
        ‚è±Ô∏è Th·ªùi gian: ${elapsed}s | 
        üéØ L∆∞·ª£t ch∆°i: ${memoryGameState.moves} | 
        ‚úÖ ƒê√£ gh√©p: ${memoryGameState.matched.length / 2}/4 c·∫∑p
    `;
}

function endMemoryGame() {
    const resultDiv = document.getElementById('memory-result');
    const elapsed = Math.floor((Date.now() - memoryGameState.startTime) / 1000);
    
    let performance = '';
    if (elapsed < 30 && memoryGameState.moves < 12) {
        performance = 'üèÜ Xu·∫•t s·∫Øc!';
    } else if (elapsed < 60 && memoryGameState.moves < 20) {
        performance = 'üéâ R·∫•t t·ªët!';
    } else {
        performance = 'üëç T·ªët l·∫Øm!';
    }
    
    resultDiv.innerHTML = `
        <div style="background: #d4edda; padding: 15px; border-radius: 8px; border: 1px solid #c3e6cb;">
            <h4>${performance}</h4>
            <p>Ho√†n th√†nh trong ${elapsed} gi√¢y v·ªõi ${memoryGameState.moves} l∆∞·ª£t ch∆°i!</p>
            <button onclick="startMemoryGame()" style="background: #28a745; color: white; border: none; padding: 8px 15px; border-radius: 5px; cursor: pointer; margin-top: 10px;">
                üîÑ Ch∆°i l·∫°i
            </button>
        </div>
    `;
    resultDiv.style.display = 'block';
}

// Word Cloud Generator
const llctKeywords = [
    { word: "Nh·∫≠n th·ª©c", weight: 10, color: "#3498db" },
    { word: "Ph·∫£n √°nh", weight: 9, color: "#e74c3c" },
    { word: "Th·ª±c ti·ªÖn", weight: 8, color: "#27ae60" },
    { word: "Bi·ªán ch·ª©ng", weight: 8, color: "#9b59b6" },
    { word: "C·∫£m t√≠nh", weight: 7, color: "#f39c12" },
    { word: "L√Ω t√≠nh", weight: 7, color: "#e67e22" },
    { word: "M√¢u thu·∫´n", weight: 6, color: "#34495e" },
    { word: "Ph√°t tri·ªÉn", weight: 6, color: "#16a085" },
    { word: "Kh√°ch quan", weight: 5, color: "#2980b9" },
    { word: "Ch·ªß quan", weight: 4, color: "#8e44ad" },
    { word: "Ch√¢n l√Ω", weight: 5, color: "#d35400" },
    { word: "Ki·ªÉm nghi·ªám", weight: 4, color: "#c0392b" },
    { word: "N·∫±m y√™n", weight: 6, color: "#7f8c8d" },
    { word: "T√≠ch c·ª±c", weight: 5, color: "#27ae60" },
    { word: "Ti√™u c·ª±c", weight: 4, color: "#e74c3c" }
];

function generateWordCloud() {
    const container = document.getElementById('wordcloud-container');
    container.innerHTML = '<div style="color: #3498db; font-size: 18px;">ü§ñ AI ƒëang t·∫°o Word Cloud...</div>';
    
    setTimeout(() => {
        container.innerHTML = '';
        
        // Shuffle and animate words
        const shuffled = [...llctKeywords].sort(() => Math.random() - 0.5);
        
        shuffled.forEach((item, index) => {
            setTimeout(() => {
                const wordElement = document.createElement('span');
                const fontSize = Math.max(12, item.weight * 2);
                
                wordElement.style.cssText = `
                    font-size: ${fontSize}px;
                    color: ${item.color};
                    font-weight: bold;
                    margin: 5px 10px;
                    display: inline-block;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    animation: bounceIn 0.6s ease;
                    opacity: 0;
                `;
                
                wordElement.textContent = item.word;
                wordElement.title = `ƒê·ªô quan tr·ªçng: ${item.weight}/10`;
                
                wordElement.addEventListener('mouseenter', () => {
                    wordElement.style.transform = 'scale(1.2)';
                    wordElement.style.textShadow = '2px 2px 4px rgba(0,0,0,0.3)';
                });
                
                wordElement.addEventListener('mouseleave', () => {
                    wordElement.style.transform = 'scale(1)';
                    wordElement.style.textShadow = 'none';
                });
                
                container.appendChild(wordElement);
                
                // Animate in
                setTimeout(() => {
                    wordElement.style.opacity = '1';
                }, 50);
                
            }, index * 200);
        });
        
        // Add CSS animation
        if (!document.getElementById('wordcloud-styles')) {
            const style = document.createElement('style');
            style.id = 'wordcloud-styles';
            style.textContent = `
                @keyframes bounceIn {
                    0% { transform: scale(0.3); opacity: 0; }
                    50% { transform: scale(1.05); opacity: 0.8; }
                    70% { transform: scale(0.9); opacity: 0.9; }
                    100% { transform: scale(1); opacity: 1; }
                }
            `;
            document.head.appendChild(style);
        }
        
    }, 1500);
}

// Story Generator
const storyTemplates = {
    "nhan-thuc": [
        "M·ªôt sinh vi√™n t√™n An ƒëang h·ªçc v·ªÅ {topic}. Ban ƒë·∫ßu, An ch·ªâ {initial_state}, nh∆∞ng qua qu√° tr√¨nh {process}, An d·∫ßn {result}. ƒê√¢y ch√≠nh l√† minh ch·ª©ng cho {principle}.",
        "Trong m·ªôt bu·ªïi th·∫£o lu·∫≠n nh√≥m, c√°c b·∫°n sinh vi√™n tranh lu·∫≠n v·ªÅ {topic}. M·ªói ng∆∞·ªùi c√≥ {different_views}, nh∆∞ng cu·ªëi c√πng h·ªç nh·∫≠n ra r·∫±ng {conclusion}."
    ],
    "cam-tinh-ly-tinh": [
        "Khi l·∫ßn ƒë·∫ßu ti·∫øp x√∫c v·ªõi tr√†o l∆∞u 'n·∫±m y√™n', B√¨nh {emotional_reaction}. Tuy nhi√™n, sau khi {rational_analysis}, B√¨nh hi·ªÉu ra r·∫±ng {deeper_understanding}.",
        "C√¢u chuy·ªán v·ªÅ hai anh em: anh C∆∞·ªùng {emotional_approach} trong khi em D≈©ng {rational_approach}. K·∫øt qu·∫£ cho th·∫•y {lesson}."
    ],
    "thuc-tien": [
        "C√¥ng ty X quy·∫øt ƒë·ªãnh th·ª≠ nghi·ªám cho nh√¢n vi√™n {practice_action}. K·∫øt qu·∫£ th·ª±c t·∫ø cho th·∫•y {outcome}, ch·ª©ng minh r·∫±ng {theoretical_point}.",
        "M·ªôt nh√≥m nghi√™n c·ª©u ti·∫øn h√†nh {experiment} ƒë·ªÉ ki·ªÉm ch·ª©ng l√Ω thuy·∫øt v·ªÅ {theory}. Sau {time_period}, h·ªç ph√°t hi·ªán {findings}."
    ],
    "bien-chung": [
        "Trong x√£ h·ªôi hi·ªán ƒë·∫°i, {phenomenon} t·∫°o ra {contradiction}. M√¢u thu·∫´n n√†y {development_process} v√† d·∫´n ƒë·∫øn {resolution}.",
        "Tr√†o l∆∞u 'n·∫±m y√™n' ban ƒë·∫ßu {initial_stage}, sau ƒë√≥ {transformation}, v√† cu·ªëi c√πng {final_outcome}. ƒê√¢y l√† v√≠ d·ª• ƒëi·ªÉn h√¨nh c·ªßa {dialectical_law}."
    ]
};

const storyElements = {
    "nhan-thuc": {
        topic: "nh·∫≠n th·ª©c ph·∫£n √°nh",
        initial_state: "hi·ªÉu m·ªôt c√°ch m∆° h·ªì",
        process: "h·ªçc t·∫≠p v√† th·ª±c h√†nh",
        result: "hi·ªÉu s√¢u s·∫Øc b·∫£n ch·∫•t v·∫•n ƒë·ªÅ",
        principle: "quy lu·∫≠t ph√°t tri·ªÉn c·ªßa nh·∫≠n th·ª©c"
    },
    "cam-tinh-ly-tinh": {
        emotional_reaction: "c·∫£m th·∫•y tho·∫£i m√°i v√† mu·ªën l√†m theo",
        rational_analysis: "t√¨m hi·ªÉu k·ªπ c√°c nghi√™n c·ª©u khoa h·ªçc",
        deeper_understanding: "ƒë√¢y ch·ªâ l√† gi·∫£i ph√°p t·∫°m th·ªùi, kh√¥ng b·ªÅn v·ªØng"
    },
    "thuc-tien": {
        practice_action: "√°p d·ª•ng m√¥ h√¨nh 'work-life balance'",
        outcome: "nƒÉng su·∫•t tƒÉng 25% v√† nh√¢n vi√™n h·∫°nh ph√∫c h∆°n",
        theoretical_point: "th·ª±c ti·ªÖn l√† ti√™u chu·∫©n ki·ªÉm nghi·ªám ch√¢n l√Ω"
    },
    "bien-chung": {
        phenomenon: "√°p l·ª±c c·∫°nh tranh gay g·∫Øt",
        contradiction: "m√¢u thu·∫´n gi·ªØa kh√°t v·ªçng th√†nh c√¥ng v√† kh·∫£ nƒÉng th·ª±c t·∫ø",
        development_process: "th√∫c ƒë·∫©y m·ªçi ng∆∞·ªùi t√¨m ki·∫øm gi·∫£i ph√°p m·ªõi",
        resolution: "s·ª± c√¢n b·∫±ng gi·ªØa n·ªó l·ª±c v√† ngh·ªâ ng∆°i h·ª£p l√Ω"
    }
};

function generateStory() {
    const topic = document.getElementById('story-topic').value;
    const container = document.getElementById('story-container');
    
    container.style.display = 'block';
    container.innerHTML = '<div style="text-align: center; color: #f39c12;">ü§ñ AI ƒëang s√°ng t√°c c√¢u chuy·ªán...</div>';
    
    setTimeout(() => {
        const templates = storyTemplates[topic];
        const elements = storyElements[topic];
        
        let selectedTemplate = templates[Math.floor(Math.random() * templates.length)];
        
        // Replace placeholders with actual content
        for (const [key, value] of Object.entries(elements)) {
            selectedTemplate = selectedTemplate.replace(`{${key}}`, value);
        }
        
        // Add some random elements
        const characters = ['An', 'B√¨nh', 'C∆∞·ªùng', 'D≈©ng', 'Linh', 'Mai'];
        const randomChar = characters[Math.floor(Math.random() * characters.length)];
        selectedTemplate = selectedTemplate.replace(/An|B√¨nh|C∆∞·ªùng|D≈©ng/g, randomChar);
        
        // Add topic-specific insights
        const insights = {
            "nhan-thuc": "üí° B√†i h·ªçc: Nh·∫≠n th·ª©c ph√°t tri·ªÉn t·ª´ th·ª±c ti·ªÖn v√† c·∫ßn ƒë∆∞·ª£c ki·ªÉm nghi·ªám b·∫±ng th·ª±c ti·ªÖn.",
            "cam-tinh-ly-tinh": "üí° B√†i h·ªçc: C·∫ßn v∆∞·ª£t l√™n t·ª´ c·∫£m t√≠nh ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c nh·∫≠n th·ª©c l√Ω t√≠nh s√¢u s·∫Øc.",
            "thuc-tien": "üí° B√†i h·ªçc: Th·ª±c ti·ªÖn l√† ti√™u chu·∫©n duy nh·∫•t ƒë·ªÉ ki·ªÉm nghi·ªám ch√¢n l√Ω.",
            "bien-chung": "üí° B√†i h·ªçc: M√¢u thu·∫´n l√† ƒë·ªông l·ª±c c·ªßa s·ª± ph√°t tri·ªÉn, kh√¥ng n√™n tr√°nh n√©."
        };
        
        container.innerHTML = `
            <div class="story-content">
                <h4>üìñ C√¢u chuy·ªán minh h·ªça</h4>
                <div class="story-text">${selectedTemplate}</div>
                <div class="story-insight">${insights[topic]}</div>
                <div class="story-actions">
                    <button onclick="generateStory()" style="background: #27ae60; color: white; border: none; padding: 8px 15px; border-radius: 5px; cursor: pointer; margin-right: 10px;">
                        üîÑ T·∫°o c√¢u chuy·ªán kh√°c
                    </button>
                    <button onclick="shareStory()" style="background: #8e44ad; color: white; border: none; padding: 8px 15px; border-radius: 5px; cursor: pointer;">
                        üì§ Chia s·∫ª
                    </button>
                </div>
            </div>
        `;
        
        // Add CSS for story
        if (!document.getElementById('story-styles')) {
            const style = document.createElement('style');
            style.id = 'story-styles';
            style.textContent = `
                .story-text {
                    font-size: 16px;
                    line-height: 1.6;
                    margin: 15px 0;
                    text-align: justify;
                }
                .story-insight {
                    background: #e8f5e8;
                    padding: 10px;
                    border-radius: 5px;
                    margin: 15px 0;
                    border-left: 4px solid #27ae60;
                    font-weight: bold;
                }
                .story-actions {
                    margin-top: 15px;
                    text-align: center;
                }
            `;
            document.head.appendChild(style);
        }
        
    }, 2000);
}

function shareStory() {
    const storyText = document.querySelector('.story-text').textContent;
    const insight = document.querySelector('.story-insight').textContent;
    
    const shareContent = `üìö C√¢u chuy·ªán LLCT:\n\n${storyText}\n\n${insight}\n\nüåê Website: Ph√¢n t√≠ch tr√†o l∆∞u "N·∫±m y√™n m·∫∑c k·ªá ƒë·ªùi"`;
    
    if (navigator.share) {
        navigator.share({
            title: 'C√¢u chuy·ªán LLCT',
            text: shareContent
        });
    } else {
        // Fallback - copy to clipboard
        navigator.clipboard.writeText(shareContent).then(() => {
            showNotification('üìã ƒê√£ copy c√¢u chuy·ªán v√†o clipboard!', 'success');
        });
    }
}

// Personality Test
const personalityQuestions = [
    {
        question: "Khi g·∫∑p v·∫•n ƒë·ªÅ kh√≥ khƒÉn, b·∫°n th∆∞·ªùng:",
        options: [
            "C·∫£m th·∫•y lo l·∫Øng v√† mu·ªën tr√°nh n√©",
            "Ph√¢n t√≠ch c·∫©n th·∫≠n tr∆∞·ªõc khi h√†nh ƒë·ªông", 
            "H√†nh ƒë·ªông ngay l·∫≠p t·ª©c d·ª±a tr√™n kinh nghi·ªám",
            "T√¨m hi·ªÉu √Ω ki·∫øn c·ªßa nhi·ªÅu ng∆∞·ªùi kh√°c"
        ],
        traits: ["emotional", "analytical", "practical", "social"]
    },
    {
        question: "C√°ch b·∫°n h·ªçc t·∫≠p hi·ªáu qu·∫£ nh·∫•t l√†:",
        options: [
            "ƒê·ªçc s√°ch v√† ghi ch√∫ chi ti·∫øt",
            "Th·∫£o lu·∫≠n v√† tranh lu·∫≠n v·ªõi b·∫°n b√®",
            "Th·ª±c h√†nh v√† √°p d·ª•ng ngay",
            "Nghe gi·∫£ng v√† quan s√°t"
        ],
        traits: ["theoretical", "social", "practical", "observational"]
    },
    {
        question: "V·ªõi tr√†o l∆∞u 'n·∫±m y√™n', b·∫°n nghƒ©:",
        options: [
            "ƒê√≥ l√† c√°ch ƒë·ªÉ gi·∫£m stress t·∫°m th·ªùi",
            "C·∫ßn ph√¢n t√≠ch nguy√™n nh√¢n s√¢u xa",
            "N√™n t√¨m gi·∫£i ph√°p th·ª±c t·∫ø thay th·∫ø",
            "M·ªói ng∆∞·ªùi c√≥ c√°ch s·ªëng ri√™ng"
        ],
        traits: ["emotional", "analytical", "practical", "accepting"]
    },
    {
        question: "Khi ƒë∆∞a ra quy·∫øt ƒë·ªãnh quan tr·ªçng, b·∫°n d·ª±a v√†o:",
        options: [
            "C·∫£m x√∫c v√† tr·ª±c gi√°c",
            "Logic v√† l√Ω lu·∫≠n",
            "Kinh nghi·ªám th·ª±c t·∫ø",
            "√ù ki·∫øn c·ªßa ng∆∞·ªùi kh√°c"
        ],
        traits: ["intuitive", "logical", "experiential", "social"]
    },
    {
        question: "B·∫°n tin r·∫±ng ki·∫øn th·ª©c ƒë√∫ng ƒë·∫Øn ƒë∆∞·ª£c ki·ªÉm ch·ª©ng b·ªüi:",
        options: [
            "C·∫£m nh·∫≠n c√° nh√¢n",
            "L√Ω thuy·∫øt khoa h·ªçc",
            "K·∫øt qu·∫£ th·ª±c ti·ªÖn",
            "S·ª± ƒë·ªìng thu·∫≠n x√£ h·ªôi"
        ],
        traits: ["subjective", "theoretical", "practical", "social"]
    }
];

let personalityAnswers = [];
let currentPersonalityQuestion = 0;

function startPersonalityTest() {
    personalityAnswers = [];
    currentPersonalityQuestion = 0;
    
    const container = document.getElementById('personality-test');
    container.style.display = 'block';
    
    showPersonalityQuestion();
}

function showPersonalityQuestion() {
    const container = document.getElementById('personality-test');
    const question = personalityQuestions[currentPersonalityQuestion];
    
    container.innerHTML = `
        <div class="personality-question">
            <div class="question-progress">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${(currentPersonalityQuestion / personalityQuestions.length) * 100}%"></div>
                </div>
                <p>C√¢u ${currentPersonalityQuestion + 1}/${personalityQuestions.length}</p>
            </div>
            
            <h4>${question.question}</h4>
            
            <div class="personality-options">
                ${question.options.map((option, index) => `
                    <button class="personality-option" onclick="selectPersonalityAnswer(${index})">
                        ${String.fromCharCode(65 + index)}) ${option}
                    </button>
                `).join('')}
            </div>
        </div>
    `;
    
    // Add CSS for personality test
    if (!document.getElementById('personality-styles')) {
        const style = document.createElement('style');
        style.id = 'personality-styles';
        style.textContent = `
            .question-progress {
                margin-bottom: 20px;
            }
            .progress-bar {
                width: 100%;
                height: 6px;
                background: #ecf0f1;
                border-radius: 3px;
                overflow: hidden;
                margin-bottom: 10px;
            }
            .progress-fill {
                height: 100%;
                background: linear-gradient(90deg, #16a085, #27ae60);
                transition: width 0.5s ease;
            }
            .personality-options {
                display: flex;
                flex-direction: column;
                gap: 10px;
                margin-top: 20px;
            }
            .personality-option {
                background: white;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                padding: 15px;
                text-align: left;
                cursor: pointer;
                transition: all 0.3s ease;
                font-size: 14px;
            }
            .personality-option:hover {
                border-color: #16a085;
                background: #e8f8f5;
                transform: translateX(5px);
            }
        `;
        document.head.appendChild(style);
    }
}

function selectPersonalityAnswer(answerIndex) {
    const question = personalityQuestions[currentPersonalityQuestion];
    personalityAnswers.push({
        questionIndex: currentPersonalityQuestion,
        answerIndex: answerIndex,
        trait: question.traits[answerIndex]
    });
    
    currentPersonalityQuestion++;
    
    if (currentPersonalityQuestion < personalityQuestions.length) {
        setTimeout(() => {
            showPersonalityQuestion();
        }, 300);
    } else {
        setTimeout(() => {
            showPersonalityResult();
        }, 500);
    }
}

function showPersonalityResult() {
    // Analyze personality traits
    const traitCounts = {};
    personalityAnswers.forEach(answer => {
        traitCounts[answer.trait] = (traitCounts[answer.trait] || 0) + 1;
    });
    
    // Determine primary learning style
    const dominantTrait = Object.keys(traitCounts).reduce((a, b) => 
        traitCounts[a] > traitCounts[b] ? a : b
    );
    
    const personalityTypes = {
        analytical: {
            title: "üß† Nh√† Ph√¢n T√≠ch",
            description: "B·∫°n c√≥ xu h∆∞·ªõng ti·∫øp c·∫≠n v·∫•n ƒë·ªÅ m·ªôt c√°ch logic v√† c√≥ h·ªá th·ªëng. Ph√π h·ª£p v·ªõi nh·∫≠n th·ª©c l√Ω t√≠nh trong LLCT.",
            strengths: "T∆∞ duy logic m·∫°nh m·∫Ω, kh·∫£ nƒÉng ph√¢n t√≠ch s√¢u s·∫Øc",
            advice: "H√£y c√¢n b·∫±ng gi·ªØa l√Ω thuy·∫øt v√† th·ª±c ti·ªÖn, ƒë·ª´ng qu√° m√°y m√≥c trong t∆∞ duy.",
            llctConnection: "B·∫°n d·ªÖ d√†ng n·∫Øm b·∫Øt quy lu·∫≠t t·ª´ c·∫£m t√≠nh l√™n l√Ω t√≠nh trong LLCT."
        },
        practical: {
            title: "üî® Nh√† Th·ª±c Ti·ªÖn",
            description: "B·∫°n tin v√†o kinh nghi·ªám th·ª±c t·∫ø v√† th√≠ch √°p d·ª•ng ki·∫øn th·ª©c v√†o cu·ªôc s·ªëng. Ph√π h·ª£p v·ªõi vai tr√≤ c·ªßa th·ª±c ti·ªÖn trong LLCT.",
            strengths: "Kh·∫£ nƒÉng ·ª©ng d·ª•ng cao, g·∫Øn li·ªÅn v·ªõi th·ª±c t·∫ø",
            advice: "ƒê·ª´ng b·ªè qua l√Ω thuy·∫øt, n√≥ s·∫Ω gi√∫p b·∫°n hi·ªÉu s√¢u h∆°n v·ªÅ th·ª±c ti·ªÖn.",
            llctConnection: "B·∫°n hi·ªÉu r√µ vai tr√≤ c·ªßa th·ª±c ti·ªÖn l√† ti√™u chu·∫©n ki·ªÉm nghi·ªám ch√¢n l√Ω."
        },
        social: {
            title: "üë• Nh√† X√£ H·ªôi H·ªçc",
            description: "B·∫°n h·ªçc t·∫≠p t·ªët qua t∆∞∆°ng t√°c x√£ h·ªôi v√† coi tr·ªçng √Ω ki·∫øn c·ªông ƒë·ªìng. Ph√π h·ª£p v·ªõi t√≠nh x√£ h·ªôi c·ªßa nh·∫≠n th·ª©c.",
            strengths: "K·ªπ nƒÉng giao ti·∫øp t·ªët, hi·ªÉu bi·∫øt ƒëa chi·ªÅu",
            advice: "H√£y ph√°t tri·ªÉn t∆∞ duy ƒë·ªôc l·∫≠p, ƒë·ª´ng ph·ª• thu·ªôc qu√° nhi·ªÅu v√†o √Ω ki·∫øn ng∆∞·ªùi kh√°c.",
            llctConnection: "B·∫°n hi·ªÉu r√µ t√≠nh x√£ h·ªôi v√† l·ªãch s·ª≠ c·ªßa nh·∫≠n th·ª©c trong LLCT."
        },
        emotional: {
            title: "‚ù§Ô∏è Nh√† C·∫£m Th·ª•",
            description: "B·∫°n h·ªçc t·∫≠p t·ªët qua c·∫£m x√∫c v√† tr·∫£i nghi·ªám c√° nh√¢n. G·∫ßn v·ªõi nh·∫≠n th·ª©c c·∫£m t√≠nh trong LLCT.",
            strengths: "Tr·ª±c gi√°c t·ªët, kh·∫£ nƒÉng c·∫£m nh·∫≠n tinh t·∫ø",
            advice: "C·∫ßn ph√°t tri·ªÉn th√™m t∆∞ duy l√Ω t√≠nh ƒë·ªÉ b·ªï sung cho c·∫£m t√≠nh.",
            llctConnection: "B·∫°n c·∫ßn ch√∫ √Ω ph√°t tri·ªÉn t·ª´ c·∫£m t√≠nh l√™n l√Ω t√≠nh theo LLCT."
        },
        theoretical: {
            title: "üìö Nh√† L√Ω Thuy·∫øt",
            description: "B·∫°n th√≠ch t√¨m hi·ªÉu ki·∫øn th·ª©c s√¢u r·ªông v√† x√¢y d·ª±ng h·ªá th·ªëng t∆∞ duy ho√†n ch·ªânh.",
            strengths: "Ki·∫øn th·ª©c r·ªông, kh·∫£ nƒÉng t·ªïng h·ª£p t·ªët",
            advice: "H√£y k·∫øt h·ª£p l√Ω thuy·∫øt v·ªõi th·ª±c ti·ªÖn ƒë·ªÉ ki·ªÉm ch·ª©ng ki·∫øn th·ª©c.",
            llctConnection: "B·∫°n ph√π h·ª£p v·ªõi vi·ªác nghi√™n c·ª©u s√¢u v·ªÅ c√°c nguy√™n l√Ω LLCT."
        }
    };
    
    const result = personalityTypes[dominantTrait] || personalityTypes.analytical;
    
    const container = document.getElementById('personality-test');
    container.innerHTML = `
        <div class="personality-result">
            <div class="result-header">
                <h3>üéØ K·∫øt qu·∫£ tr·∫Øc nghi·ªám</h3>
                <div class="personality-type">
                    <h2>${result.title}</h2>
                </div>
            </div>
            
            <div class="result-content">
                <div class="description">
                    <h4>üìã M√¥ t·∫£:</h4>
                    <p>${result.description}</p>
                </div>
                
                <div class="strengths">
                    <h4>üí™ ƒêi·ªÉm m·∫°nh:</h4>
                    <p>${result.strengths}</p>
                </div>
                
                <div class="advice">
                    <h4>üí° L·ªùi khuy√™n:</h4>
                    <p>${result.advice}</p>
                </div>
                
                <div class="llct-connection">
                    <h4>üîó Li√™n h·ªá v·ªõi LLCT:</h4>
                    <p>${result.llctConnection}</p>
                </div>
            </div>
            
            <div class="trait-chart">
                <h4>üìä Ph√¢n t√≠ch chi ti·∫øt:</h4>
                ${Object.entries(traitCounts).map(([trait, count]) => `
                    <div class="trait-bar">
                        <span class="trait-name">${trait}</span>
                        <div class="bar-container">
                            <div class="bar-fill" style="width: ${(count / personalityQuestions.length) * 100}%"></div>
                        </div>
                        <span class="trait-count">${count}/${personalityQuestions.length}</span>
                    </div>
                `).join('')}
            </div>
            
            <div class="result-actions">
                <button onclick="startPersonalityTest()" style="background: #3498db; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-right: 10px;">
                    üîÑ L√†m l·∫°i test
                </button>
                <button onclick="savePersonalityResult()" style="background: #27ae60; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer;">
                    üíæ L∆∞u k·∫øt qu·∫£
                </button>
            </div>
        </div>
    `;
    
    // Add CSS for result
    if (!document.getElementById('result-styles')) {
        const style = document.createElement('style');
        style.id = 'result-styles';
        style.textContent = `
            .personality-result {
                background: white;
                border-radius: 10px;
                padding: 20px;
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }
            .result-header {
                text-align: center;
                margin-bottom: 20px;
            }
            .personality-type h2 {
                color: #16a085;
                font-size: 1.5em;
                margin: 10px 0;
            }
            .result-content > div {
                margin: 15px 0;
                padding: 10px;
                border-left: 4px solid #16a085;
                background: #f8f9fa;
                border-radius: 0 5px 5px 0;
            }
            .trait-chart {
                margin: 20px 0;
            }
            .trait-bar {
                display: flex;
                align-items: center;
                margin: 8px 0;
                font-size: 14px;
            }
            .trait-name {
                width: 80px;
                font-weight: bold;
                text-transform: capitalize;
            }
            .bar-container {
                flex: 1;
                height: 20px;
                background: #ecf0f1;
                border-radius: 10px;
                margin: 0 10px;
                overflow: hidden;
            }
            .bar-fill {
                height: 100%;
                background: linear-gradient(90deg, #16a085, #27ae60);
                border-radius: 10px;
                transition: width 1s ease;
            }
            .trait-count {
                width: 40px;
                text-align: center;
                font-weight: bold;
            }
            .result-actions {
                text-align: center;
                margin-top: 20px;
            }
        `;
        document.head.appendChild(style);
    }
}

function savePersonalityResult() {
    const result = {
        type: document.querySelector('.personality-type h2').textContent,
        answers: personalityAnswers,
        timestamp: new Date().toISOString()
    };
    
    window.personalityResults = window.personalityResults || [];
    window.personalityResults.push(result);
    
    showNotification('üíæ ƒê√£ l∆∞u k·∫øt qu·∫£ tr·∫Øc nghi·ªám!', 'success');
}

// Initialize chat when content loads
document.addEventListener('DOMContentLoaded', () => {
    // Setup enter key for chat input
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && e.target.id === 'chat-input') {
            e.preventDefault();
            sendMessage();
        }
    });
    
    // Initialize memory game stats update
    setInterval(() => {
        if (memoryGameState.startTime && document.getElementById('memory-stats')) {
            updateMemoryStats();
        }
    }, 1000);
});

// Add some philosophical quotes for the chatbot
const philosophyQuotes = [
    "Th·ª±c ti·ªÖn l√† ti√™u chu·∫©n duy nh·∫•t c·ªßa ch√¢n l√Ω - V.I.Lenin",
    "Kh√¥ng c√≥ g√¨ t·ªìn t·∫°i m√£i m√£i, m·ªçi th·ª© ƒë·ªÅu trong v·∫≠n ƒë·ªông - Heraclitus", 
    "Nh·∫≠n th·ª©c b·∫Øt ƒë·∫ßu t·ª´ th·ª±c ti·ªÖn v√† quay tr·ªü l·∫°i th·ª±c ti·ªÖn - Mao Tr·∫°ch ƒê√¥ng",
    "Tri·∫øt h·ªçc kh√¥ng ch·ªâ gi·∫£i th√≠ch th·∫ø gi·ªõi m√† c√≤n thay ƒë·ªïi n√≥ - Karl Marx"
];

function getRandomQuote() {
    return philosophyQuotes[Math.floor(Math.random() * philosophyQuotes.length)];
}

// Export functions to global scope
if (typeof window !== 'undefined') {
    window.sendMessage = sendMessage;
    window.startMemoryGame = startMemoryGame;
    window.generateWordCloud = generateWordCloud;
    window.generateStory = generateStory;
    window.shareStory = shareStory;
    window.startPersonalityTest = startPersonalityTest;
    window.selectPersonalityAnswer = selectPersonalityAnswer;
    window.savePersonalityResult = savePersonalityResult;
    window.regenerateQuiz = regenerateQuiz;
    window.showNotification = showNotification;
}

} // End of window check